# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: build

on:
  push:
    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_TYPE: Release

jobs:
  build:
    strategy: 
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
      fail-fast: false
  
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - uses: actions/cache@v4
      id: cache
      with:
        path: | 
          ~/.conan2/
        key: ${{ runner.os }}-conan-dependencies

    - uses: actions/setup-python@v5
      with:
        python-version: "3"
        cache: "pip"
             
    - name: install and setup conan
      run: | 
        pip3 install conan
        conan profile detect --force
        conan install conanfile.txt --build=missing

    - name: install CMake Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt install build-essential tree
    - name: install wxwidgets mac
      if: matrix.os == "macos-latest"
      run: brew install wxwidgets

    - name: Build on ubuntu and macos
      if: matrix.os != 'windows-latest'
      # Build your program with the given configuration
      run: | 
        cmake --version
        cmake --preset conan-release
        cmake --build ${{github.workspace}}/build/${{env.BUILD_TYPE}}/ --config ${{env.BUILD_TYPE}}

    - name: Build on windows
      if: matrix.os == 'windows-latest'
      # Build your program with the given configuration
      run: |
        cmake --version
        cmake --preset conan-default
        cmake --build ${{github.workspace}}/build/ --config ${{env.BUILD_TYPE}}
        
    - uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.os}}-binaries
        path: |
          build/Release/gcode2hpgl.exe
          build/Release/hpgl2lpkf91s.exe
          build/Release/sendHPGL.exe
          build/Release/gcode2hpgl
          build/Release/hpgl2lpkf91s
          build/Release/sendHPGL
